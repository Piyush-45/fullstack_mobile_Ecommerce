// !! make db ,productTable import relative to avoid errors
import {  productsTable } from '../../db/productSchema.js'
import { db } from '../../db/index.js'

import { eq } from "drizzle-orm"
import { Request, Response } from "express"

export const listProudcts = async (req: Request, res: Response) => {
    try {
        const products = await db.select().from(productsTable)
        res.json(products)

    } catch (e) {
        console.log(e)
        res.status(500).send(e)
    }
}

export const getProductById = async (req: Request, res: Response) => {
    try {
        const { id } = req.params;
        const [product] = await db.select().from(productsTable).where(eq(productsTable.id, Number(id)))

        if(!product){
            res.status(404).send({message:'product not found'})
        }else{
            res.json(product)
        }
    } catch (e) {

    }
}
export const createProduct = async (req: Request, res: Response) => {
  try {
      // Destructure fields and ignore `id`


      const [product] = await db
          .insert(productsTable)
          .values(req.cleanBody) // Insert only fields other than `id`
          .returning();

      res.status(201).json(product);
  } catch (e) {
      res.status(500).send(e);
  }
};


export async function updateProduct(req: Request, res: Response) {
    try {
      const id = Number(req.params.id);
      const updatedFields = req.body;
  
      const [product] = await db
        .update(productsTable)
        .set(updatedFields)
        .where(eq(productsTable.id, id))
        .returning();
  
      if (product) {
        res.json(product);
      } else {
        res.status(404).send({ message: 'Product was not found' });
      }
    } catch (e) {
      res.status(500).send(e);
    }
  }

export async function deleteProduct(req: Request, res: Response) {
    try {
      const id = Number(req.params.id);
      const [deletedProduct] = await db
        .delete(productsTable)
        .where(eq(productsTable.id, id))
        .returning();
      if (deletedProduct) {
        res.status(204).send();
      } else {
        res.status(404).send({ message: 'Product was not found' });
      }
    } catch (e) {
      res.status(500).send(e);
    }
  }





// * req.params is the standard place to retrieve the id when it's part of the URL path (in routes like /products/:id).
// * For GET, PUT, PATCH, and DELETE methods, the id is typically passed through the URL using route parameters.
// * POST requests (used for creating resources) usually do not need an id because it's auto-generated by the database.